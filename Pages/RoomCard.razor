@using cam.Models
@using cam.Services
@inject NavigationManager NavigationManager
@inject IClassService classRepo
@inject IRoomService roomRepo
@inject IModalDialogService ModalDialog
@inject NotifyService Notify
@implements IDisposable 



<div class="grid-30 mobile-grid-100 tablet-grid-50 card-fluid @dragClass" style="margin-top:1rem;"
        ondragover="event.preventDefault()"
        @ondrop="@(e => HandleDrop())" >
    <div class="card-body">
        <h2 class="title-1">@Room.Name</h2>

        <ul class="list">
            @if(Classes != null)
                @foreach(var c in Classes)
                {
                    <li class="list-item" draggable="true" @ondragstart="@(e => { OnDragStart.InvokeAsync(c); })">
                        @c.Name - <label class="label-1">@c.Time</label>
                    </li>
                }
        </ul>

        <label class="label-1" >Supervisor - @Room.SupervisorUserName</label>
    </div>
</div>

@code
{
    [Parameter] public Room Room { get; set; }

    [Parameter] public Class Dragged { get; set; }

    public List<Class> Classes { get; set; }

    [Parameter] public EventCallback<Class> OnDragStart { get; set; }

    string dragClass = "";

    protected override async Task OnInitializedAsync()
    {
        Notify.NotifyDelete += RemoveDragged;
        Classes = await classRepo.GetForRoom(Room.Id);
    }

    public async Task RemoveDragged()
    {
        if(Classes.Contains(Dragged))
            await InvokeAsync(() =>
            {
                Classes.Remove(Dragged);
                StateHasChanged();
            });
    }


    async void HandleDrop()
    {
        ModalDialogOptions options = new ModalDialogOptions()
        {
            BackgroundClickToClose = false,
            Style = "liquid-modal-dialog-title"
        };

        ModalDialogResult result = await ModalDialog.ShowDialogAsync<ConfirmationModal>($"Do you wish to move {Dragged.Name} to {Room.Name} ?", options);

        if(result.Success)
        {
            if(Dragged != null && !Classes.Exists(e => e.Id == Dragged.Id))
            {
                Dragged.RoomId = Room.Id;
                var r = await classRepo.Update(Dragged);
                await Notify.Delete();
                Classes.Add(Dragged);
                StateHasChanged();
            }
        }
    }

    public void Dispose()
    {
        Notify.NotifyDelete -= RemoveDragged;
    }
}