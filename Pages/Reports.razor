@page "/reports"
@using cam.Models
@using cam.Services
@inject NavigationManager NavigationManager
@inject IClassService classRepo
@inject IStudentService studentRepo
@inject IReportService reportRepo

<section class="page-body">
    <div class="table-wrapper card">
        
        <label class="label-1" for="period">Select the period<small>*</small></label>
        <select type="text" id="period" @onchange="@(e => { Sort(e.Value.ToString(), "period"); })">
            <option value="All">All</option>
            <option value="@String.Format("{0:MMM} {1}", DateTime.Now.AddMonths(-1), DateTime.Now.Year)">@DateTime.Now.AddMonths(-1).ToString("MMMM")</option>
            <option value="@String.Format("{0:MMM} {1}", DateTime.Now, DateTime.Now.Year)">@DateTime.Now.ToString("MMMM")</option>
            <option value="@String.Format("{0:MMM} {1}", DateTime.Now.AddMonths(1), DateTime.Now.Year)">@DateTime.Now.AddMonths(1).ToString("MMMM")</option>
        </select>

        <label class="label-1" for="class">Select the class<small>*</small></label>
        <select type="text" id="class" @onchange="@(e => { Sort(e.Value.ToString(), "class"); })">
            <option value="All">All</option>
            @foreach (var c in classes)
            {
                <option value="@c.Id">@c.Name</option>
            }
        </select>

        <table>
            <caption class="title-1">Reports</caption>
            <thead>
                <tr>
                    <th scope="col">Period</th>
                    <th scope="col">Student</th>
                    <th scope="col">See</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var report in sortedReports)
                {
                    <tr>
                        <td data-label=@report.Id>@report.Period</td>
                        <td data-label=@report.Id> @(students.Where(s=>s.Id == report.StudentId).FirstOrDefault().EnglishName) </td>
                        <td data-label=@report.Id> 
                            @* <a href="/printreport/{@report.Id}">See</a> *@
                            <button onclick="window.open('/printreport/@report.Id', 'Report', 'location=0, status=0, scrollbars=1,resizable=0, width=650,height=910').moveTo(0,0)" class="badge">See Report</button> 
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</section>

@code
{
    List<Models.Report> reports = new List<Models.Report>();
    List<Models.Report> sortedReports = new List<Models.Report>();
    List<Student> students = new List<Student>();
    List<Class> classes = new List<Class>();

    string period = "All";
    string classId = "All";

     protected override async Task OnInitializedAsync()
    {
        classes = await classRepo.Get();
        students = await studentRepo.Get();
        reports = sortedReports = await reportRepo.Get();
        StateHasChanged();
    }

    void Sort(string constraint, string source)
    {
        if(source == "class")
            classId = constraint;
        else
            period = constraint;

        
        sortedReports = period == "All" ? reports : reports.Where(r => r.Period.ToLower() == period.ToLower()).ToList();
        sortedReports = classId == "All" ? sortedReports : sortedReports.Where(r => { return ReportBelongsToClass(r); }).ToList();
    }

    public bool ReportBelongsToClass(cam.Models.Report report)
    {
        var student = students.Where(s => s.Id == report.StudentId).FirstOrDefault();
        if(student == null)
            return false;

        var c = classes.Where(cl => cl.Id == student.ClassId).FirstOrDefault();
        if(c == null)
            return false;

        return c.Id == classId;
    }
}