@page "/rooms"
@using cam.Models
@using cam.Services
@inject NavigationManager NavigationManager
@inject IUserService userRepo
@inject IRoomService roomRepo
@inject IClassService classRepo


<section class="grid-container">
    @foreach(var room in rooms)
    {
        <RoomCard Room=room Dragged="@Dragged" OnDragStart="DragStart"/>
    }
    <div class="grid-25 mobile-grid-100 tablet-grid-50 suffix-75 card-fluid">
        <div class="card-body">
            <h2 class="title-1">Add Room</h2>
            <EditForm Model="@room" OnValidSubmit="SaveRoom">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
            <label class="label-1" for="name">Room name<small>*</small></label>
            <input type="text" id="name" required @bind="room.Name">
            <label class="label-1" for="supervisor">Supervisor<small>*</small></label>
            <select type="text" id="supervisor" required @bind="room.SupervisorUserName">
                <option value="">Select...</option>
                @foreach (var teacher in teachers)
                {
                    <option value=@teacher.UserName>@teacher.UserName</option>
                }
            </select>
            <button type="submit" class="submit-btn">
                    Add
            </button>
            </EditForm>
        </div>
    </div>


</section>



@code
{
    List<Room> rooms = new List<Room>();
    List<Data.AppUser> teachers = new List<Data.AppUser>();
    List<Class> classes = new List<Class>();

    public Class Dragged { get; set; }

    Room room = new Room();
    Room Common = null;

    protected override async Task OnInitializedAsync()
    {
        rooms = await roomRepo.Get();

        if(rooms.Where(r => r.Name.ToLowerInvariant() == "common").Any())
            Common = rooms.Where(r => r.Name.ToLowerInvariant() == "common").FirstOrDefault();
        else
            await CreateCommonRoom();

        foreach (var room in rooms)
        {   
            room.Classes = await classRepo.GetForRoom(room.Id);
        }
        StateHasChanged();
        teachers = await userRepo.Get();
        StateHasChanged();
    }

    async Task CreateCommonRoom()
    {
        var common = new Room() { Name = "COMMON", SupervisorUserName = "user@gmail.com" };
        await roomRepo.Insert(common);
        rooms = await roomRepo.Get();
    }

    private async void SaveRoom()
    {
        await roomRepo.Insert(room);
        rooms = await roomRepo.Get();
        room = new Room();
        StateHasChanged();
    }

    void DragStart(Class @class)
    {
        Dragged=@class;
        StateHasChanged();
    }
}